@inherits LayoutComponentBase

<MudThemeProvider
    @ref="_mudThemeProvider"
    IsDarkMode="_isDarkMode"
    Theme="Configuration.Theme" />
<MudSnackbarProvider/>
<MudDialogProvider/>

<AuthorizeView>
    <Authorized>
        <MudLayout>
            <MudAppBar>
                <MudIconButton
                    Icon="@Icons.Material.Filled.Menu"
                    Color="Color.Inherit"
                    Edge="Edge.Start"
                    @onclick="ToggleDrawer" />
                Dima
                <MudSpacer/>
                <MudText Typo="Typo.caption">
                    @context.User.Identity?.Name
                </MudText>
                <MudSwitch 
                    @bind-Value="_isDarkMode"
                    Color="Color.Inherit"
                    T="bool"
                    Class="ma-4"
                    ThumbIcon="@Icons.Material.Filled.Lightbulb"/>
            </MudAppBar>
            <MudDrawer @bind-Open="@_isDrawerOpened">
                <NavMenu/>
            </MudDrawer>
            <MudMainContent Class="mt-5">
                <MudContainer>
                    @Body
                </MudContainer>
            </MudMainContent>
        </MudLayout>
    </Authorized>
    <NotAuthorized>
        <LoginRedirect/>
    </NotAuthorized>
</AuthorizeView>

@code
{
    private bool _isDrawerOpened = true;
    private bool _isDarkMode = true;
    private MudThemeProvider _mudThemeProvider = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            StateHasChanged();
        }
    }
    
    private Task OnSystemPreferenceChanged(bool isDarkMode)
    {
        _isDarkMode = isDarkMode;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private void ToggleDrawer() => _isDrawerOpened = !_isDrawerOpened;
}
